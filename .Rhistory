body <- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
GetInfo <- function(frame,i){
first <- flattened.body$first_name[i]
last <- flattened.body$last_name[i]
state.acro <- flattened.body$state[i]
party.acro <- flattened.body$party[i]
phone.num <- flattened.body$phone[i]
result.sentence <- paste(first,last,paste0("(",state.acro,"-",party.acro,")."),"Phone:",phone.num)
return(result.sentence)
}
result.list <- list(first = GetInfo(flattened.body,1), second = GetInfo(flattened.body,2), third = GetInfo(flattened.body,3))
result.list
topic <- "health"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
body<- fromJSON(content(response,"text"))
View(body)
topic <- "health"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
View(body)
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
rmd.billinfo.frame <- kable(bill.info)
rmd.billinfo.frame
topic <- "immigration"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
kable(bill.info)
topic <- "gun"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
rmd.billinfo.frame <- kable(bill.info)
rmd.billinfo.frame
topic <- "gun"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
rmd.billinfo.frame <- kable(bill.info)
rmd.billinfo.frame
topic <- "health care"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
topic <- "health"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
rmd.billinfo.frame <- kable(bill.info)
rmd.billinfo.frame
topic <- "health"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
rmd.billinfo.frame <- kable(bill.info)
rmd.billinfo.frame
topic <- "environment"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
kable(bill.info)
health care
health care
health care
topic <- "health care"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
bill.info <- select(flattened.body, "Bill Id" = bill_id, "Introduction Date" = introduced_on, "Official Title" = official_title)
bill.info <- mutate(bill.info, "Link" = paste0("[link](",flattened.body$urls.congress,")") )
kable(bill.info)
topic <- "health care"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
topic <- "health"
request <- "bills/search"
search.query <- list(query = topic, order="introduced_on", per_page="25")
response <- GET(paste0(base.uri,request),query=search.query)
body<- fromJSON(content(response,"text"))
flattened.body <- flatten(body$results)
View(flattened.body)
base.uri <- "https://congress.api.sunlightfoundation.com/"
request <- "legislators/locate"
zip.code <- 98105
query.param <- list(zip = zip.code)
paste0(base.uri,request)
install.packages("ggplot2")
library("ggplot2")
library("ggpslot2")
library("ggplot2")
library("ggplot2")
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y=hwy))
ggplot(data=mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy), color="blue", size=10)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy), color="blue", size=1)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy,color="red"), color="blue", size=1)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy), color="blue", size=1)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy), color=blue, size=1)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy), color="red", size=1)
blue
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy), color="blue", size=1)
ggplot(data=mpg) + geom_point(mapping = aes(x=displ,y=hwy)) +
geom_line(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point()
+ geom_line()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_line()
library('ggplot2')
library('dplyr')
?diamonds
?diamonds
_column(diamonds)
colnames(diamonds)
rownames(diamonds)
?sample_n
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds.sample)
ggplot(data = diamonds.sample) + geom_points(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, color=clarity))
ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price, color=clarity))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, size= cut))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, shape= cut))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = price, size=price))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = cut, size=price))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = price, y = carat, shape= cut))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = cut, size=price))
ggplot(data = diamonds.sample) + geom_point(mapping = aes(x = carat, y = cut, size=price, color=price))
ggplot(data = diamonds.sample) + geom_line(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) + geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) + geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = carat))
ggplot(data = diamonds.sample) +
geom_bar(x = cut)
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds.sample) +
geom_bar(mapping = aes(x = cut, fill=clarity))
hist(diamonds$price)
?hist
hist(diamonds$price, clarity)
hist(diamonds$price, diamonds$clairty)
hist(diamonds$price, diamonds$clarity)
hist(diamonds$price)
ggplot(data = diamonds) +
geom_hist(mapping = aes(x=price,fill=clarity))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x=price,fill=clarity))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x=depth,fill=clarity))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(y = price, x = carat),color = "red") +
geom_smooth(mapping = aes(y = price, x = carat), color="blue")
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(y = price, x = carat, color=cut)) +
geom_smooth(mapping = aes(y = price, x = carat, color=cut))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(y = price, x = carat, color=cut), alpha=0.1) +
geom_smooth(mapping = aes(y = price, x = carat, color=cut))
ggplot(data = diamonds.sample) +
geom_point(mapping = aes(y = price, x = carat, color=cut), alpha=0.1) +
geom_smooth(mapping = aes(y = price, x = carat, color=cut), se=FALSE)
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class), stat="count")
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class), stat="mean")
ggplot(data = mpg) +
stat_count(mapping = aes(x = hwy, fill=class))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class), stat="count")
ggplot(data = mpg) +
stat_count(mapping = aes(x = hwy, fill=class))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class, fill=class), stat="count")
ggplot(data = mpg) +
stat_count(mapping = aes(x = hwy, fill=class))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class), stat="count")
ggplot(data = mpg) +
stat_count(mapping = aes(x = hwy, fill=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty, y = hwy, color=class)) +
scale_x_reverse() +
scale_color_hue(l = 70, c = 30)
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty, y = hwy, color=class)) +
scale_x_reverse() + # reverse x axis
scale_color_hue(l = 70, c = 30)
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty, y = hwy, color=class)) +
scale_x_reverse() + # reverse x axis
scale_color_hue(l = 70, c = 30) # custom color scale
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "Set3"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "Set1"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "Set4"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "s"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "YnR"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "YnR"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "Set3"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "PuBu"))
ggplot(data = mpg) +
geom_point(aes(x = displ,y = hwy, color=class), size=4) +
scale_color_brewer((palette = "Set3"))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill=class)) +
coord_flip()
ggplot(mpg, aes(x = factor(1), fill=factro(cyl))) +
geom_bar(width = 1) +
coord_polar(theta="y")
ggplot(mpg, aes(x = factor(1), fill=factor(cyl))) +
geom_bar(width = 1) +
coord_polar(theta="y")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class + cyl, nrow=5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class + cyl)
library('ggplot2')
library('ggplot2')
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut), stat="count")
ggplot(data = diamonds)+
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut), stat="count")
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min, fun.ymax = max, fun.y = median)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut), fill=clarity)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,fill = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut,fill = clarity), position = "dodge")
ggplot(data = diamonds) +
geom_points(mapping = aes(x=cut,fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_point(mapping = aes(x=cut,fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_point(mapping = aes(x=cut, y = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x=cut, y = clarity), position = "jitter")
ggplot(data = diamonds) +
geom_boxplot(x = color, y = price)
ggplot(data = diamonds) +
geom_boxplot(y = price)
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price))
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), color = "Set3")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price)) +
scale_color_brewer("Set3")
# Load the shiny, ggplot2, and dplyr libraries
library('shiny')
library('ggplot2')
library('dplyr')
# You will once again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 3000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamond.data <- diamonds
diamonds.sample <- sample_n(diamond.data,3000)
# For convenience store the `range()` of values for the `price` and `carat` values
# for the ENTIRE diamonds dataset.
price.range <- range(diamond.data$price)
carat.range <- range(diamond.data$carat)
# Define a UI using a fluidPage layout
app.ui <- fluidPage(
# Include a `titlePanel` with the title "Diamond Viewer"
titlePanel(title="Diamond Viewer"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput(inputId="price",label="Price (in dollars)", min=price.range[1],max=price.range[2],value=price.range[1]),
# A sliderInput labeled "Carats". This slider should let the user pick a range
# between the minimum and maximum carats of the entire diamond data set
sliderInput(inputId="carat",label="Carats", min=carat.range[1],max=carat.range[2],value=carat.range[1]),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput(inputId="showline",label="Show Trendline",value=TRUE),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput(inputId="facet", label="Facet By", choices=list('Choices' = c("cut","clarity","color"))  )
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot')
)
# Bonus: a dataTableOutput showing a data table of relevant observations
)
)
app.server <- function(input, output){
# Define a Server function for the app
# Assign a reactive `renderPlot()` function to the outputted `plot`
output$plot <- renderPlot({
# This function should take the `diamonds.sample` data set and filter it by the
# input price and carat ranges.
# Hint: use dplyr and multiple `filter()` operations
filtered.data <- filter(diamonds.sample,price == input$price, carat == input$carat)
# The filtered data set should then be used in a ggplot2 scatter plot with the
# carat on the x-axis, the price on the y-axis, and color based on the clarity
# You should specify facets based on what feature the user selected to "facet by"
#   (hint: you can just pass that string to the `facet_wrap()` function!)
to.be.graph <- ggplot(data = filtered.data) +
geom_point(mapping = aes(x=carat,y=price,color=clarity)) +
facet_wrap(~input$facet)
# Finally, if the "trendline" checkbox is selected, you should also include a
# geom_smooth geometry (with `se=FALSE`)
# Hint: you'll need to use an `if` statement, and save the `ggplot` as a variable
#      that you can then add the geom to.
# Be sure and return the completed plot!
if(input$showline){
to.be.graph +
geom_smooth(method=lm,se=FALSE)
}
return(to.be.graph)
}
)
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui=app.ui,server=app.server)
library(ggplot2)
?map
?geom_map
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
??map
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
?maps
library(ggplot2)
library(maps)
library(ggplot2)
library(maps)
?maps
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
?map_data
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
usa.map <- map_data("usa")
usa.map
View(usa.map)
View(usa.map)
source('~/Desktop/UW/INFO 201/final_project/test.R')
usa.map <- map_data("county")
source('~/Desktop/UW/INFO 201/final_project/test.R')
library(ggplot2)
usa.map <- map_data("state")
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
shiny::runApp('Desktop/UW/INFO 201/final_project/INFOGroupProject')
setwd("~/Desktop/UW/INFO 201/final_project/INFOGroupProject")
setwd("~/Desktop/UW/INFO 201/final_project/INFOGroupProject")
full.data.set <- read.csv('filtered_college_data.csv', stringsAsFactors=FALSE)
View(full.data.set)
runApp()
select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP05', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP05' != "0")
View(select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP05', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP05' != "0"))
is.numeric(full.data.set$PCIP04[1])
filter_(input$major != "0")s
test <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP04', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP04' != "0")
View(test)
test <- mutate_(test, 'PCIP04'=replace('PCIP04',ss))
?replace
?select
?replace
test <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP04', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP04' != "0")
View(test)
test$PCIP04[2] == "0"
test$PCIP04[2] != "0"
filter_(test,'PCIP04' == "1")
filter_(test,'PCIP04' == "0")
filter_(test,'PCIP04' == "PCIP04")
filter_(test,~ 'PCIP04' == "0")
filter_(test,~'PCIP04' == "0")
filter_(test,~'PCIP04' == "PCIP04")
?as.name
?as.ysmbol
?as.symbol
filter_(test,as.name('PCIP04') == "PCIP04")
filter_(test,as.name('PCIP04') == "0")
filter_(test,as.symbol('PCIP04') == "0")
filter(test,as.symbol('PCIP04') == "0")
filter_(test,PCIP04 == "0")
filter(test,PCIP04 == "0")
filter(test,'['(test,'PCIP04')==0)
filter_(test,'['(test,'PCIP04')==0)
filter(test,'['(test,'PCIP04')==0)
filter(test,'['(test,'PCIP04')!=0)
filter(test,'['(test,'PCIP04')!= 0 & '['(test,'PCIP04')!= NULL)
filter(test,'['(test,'PCIP04')!= 0,'['(test,'PCIP04')!= NULL)
filter(test,'['(test,'PCIP04')!= 0,'['(test,'PCIP04')!= "NULL")
runApp()
runApp()
runApp()
test <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP12', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT")
View(test)
test <- test %>% filter_(.dots=paste0('PCIP12',"!= ","0"))
test <- test %>% filter(SATVRMID != "NULL", SATMTMID != "NULL", SATWRMID != "NULL")
test <- test %>% filter(SATVRMID != "NULL", SATMTMID != "NULL", SATWRMID != "NULL")
View(test)
runApp()
