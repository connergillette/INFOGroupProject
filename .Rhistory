filter_(test,~'PCIP04' == "PCIP04")
?as.name
?as.ysmbol
?as.symbol
filter_(test,as.name('PCIP04') == "PCIP04")
filter_(test,as.name('PCIP04') == "0")
filter_(test,as.symbol('PCIP04') == "0")
filter(test,as.symbol('PCIP04') == "0")
filter_(test,PCIP04 == "0")
filter(test,PCIP04 == "0")
filter(test,'['(test,'PCIP04')==0)
filter_(test,'['(test,'PCIP04')==0)
filter(test,'['(test,'PCIP04')==0)
filter(test,'['(test,'PCIP04')!=0)
filter(test,'['(test,'PCIP04')!= 0 & '['(test,'PCIP04')!= NULL)
filter(test,'['(test,'PCIP04')!= 0,'['(test,'PCIP04')!= NULL)
filter(test,'['(test,'PCIP04')!= 0,'['(test,'PCIP04')!= "NULL")
runApp()
runApp()
runApp()
test <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP12', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT")
View(test)
test <- test %>% filter_(.dots=paste0('PCIP12',"!= ","0"))
test <- test %>% filter(SATVRMID != "NULL", SATMTMID != "NULL", SATWRMID != "NULL")
test <- test %>% filter(SATVRMID != "NULL", SATMTMID != "NULL", SATWRMID != "NULL")
View(test)
runApp()
library(shiny)
library(dplyr)
runApp()
runApp()
?conditionalPanel
runApp()
runApp()
setwd("C:/Users/pvthe/Desktop/uw hw/sophmore/Winter/Info 201/Group Project/INFOGroupProject")
runApp()
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(sp)
library(leaflet)
library(htmltools)
url <- 'https://api.mapbox.com/styles/v1/connergillette/cizyy5a9m004m2smjhu438php/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiY29ubmVyZ2lsbGV0dGUiLCJhIjoiY2l6cWIwOWJuMDE3azMzcDdvdmx3eWMwMyJ9.Qa235PPv1uPZtvaWIUSpQA'
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT
)
shinyServer(function(input, output) {
output$map <- renderLeaflet({
df$LATITUDE <- as.numeric(df$LATITUDE)
df$LONGITUDE <- as.numeric(df$LONGITUDE)
popup.content <- paste(sep = '<br />', paste0('<a target="_blank" href="http://', df$INSTURL, '">',
df$INSTNM, '</a>'), paste0('<b>Location: </b>', df$CITY, ', ', df$STABBR), ifelse(df$ADM_RATE != 'NULL',
paste0('<b>Admission Rate: </b>', as.numeric(df$ADM_RATE) * 100, '%'), '<b>Admission Rate:</b> Not given'))
leaflet(df) %>%
addCircleMarkers(popup = popup.content, stroke = FALSE, fillOpacity = 1, radius = 4) %>%
addTiles(urlTemplate = url, attribution = 'Maps provided by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
})
})
runApp()
runApp()
shinyServer(function(input, output) {
url <- 'https://api.mapbox.com/styles/v1/connergillette/cizyy5a9m004m2smjhu438php/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiY29ubmVyZ2lsbGV0dGUiLCJhIjoiY2l6cWIwOWJuMDE3azMzcDdvdmx3eWMwMyJ9.Qa235PPv1uPZtvaWIUSpQA'
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT
)
#df <- head(df, 100)
#View(df)
output$map <- renderLeaflet({
df$LATITUDE <- as.numeric(df$LATITUDE)
df$LONGITUDE <- as.numeric(df$LONGITUDE)
popup.content <- paste(sep = '<br />', paste0('<a target="_blank" href="http://', df$INSTURL, '">',
df$INSTNM, '</a>'), paste0('<b>Location: </b>', df$CITY, ', ', df$STABBR), ifelse(df$ADM_RATE != 'NULL',
paste0('<b>Admission Rate: </b>', as.numeric(df$ADM_RATE) * 100, '%'), '<b>Admission Rate:</b> Not given'))
leaflet(df) %>%
addCircleMarkers(popup = ~htmlEscape(paste0(INSTNM, ', ', CITY)), stroke = FALSE, fillOpacity = 1, radius = 4) %>%
addTiles(urlTemplate = url, attribution = 'Maps provided by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView(lng = -104.82, lat = 47.55, zoom = 3)
})
})
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT)
is.data.frame(df)
View(df)
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?filter()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT)
df <- filter(df, !is.na(LATITUDE)) %>% filter(!is.na(LONGITUDE))
View(df)
runApp()
runApp()
?as.numeric
runApp()
shiny::runApp()
install.packages(shinythemes)
install.packages('shinythemes')
runApp()
install.packages("shinythemes")
# Loads the required library
library(shiny)
library(leaflet)
library(dplyr)
library(shinythemes)
# Reads the csv files
data.set <- read.csv('filtered_college_data.csv', stringsAsFactors=FALSE)
# Changes the string data in the data frame to numeric form
data.set$TUITIONFEE_IN <- as.numeric(data.set$TUITIONFEE_IN)
# Changes the string data in the data frame to numeric form
data.set$TUITIONFEE_OUT <- as.numeric(data.set$TUITIONFEE_OUT)
# Changes the string data in the data frame to numeric form
data.set$ADM_RATE <- as.numeric(data.set$ADM_RATE)
# Changes the string data in the data frame to numeric form
data.set$UGDS <- as.numeric(data.set$UGDS)
# Changes the string data in the data frame to numeric form
data.set$DEBT_MDN <- as.numeric(data.set$DEBT_MDN)
# Changes the string data in the data frame to numeric form
data.set$INEXPFTE <- as.numeric(data.set$INEXPFTE)
# Creates a list of all the states in the country
state.abbr.list <- as.vector(unique(select(data.set,STABBR))[,1])
state.name.list <- c()
# Inclusion of common wealth territories to the state's list
commonwealth.territories <- list("AS" = "American Samoa",
"DC" = "District of Columbia",
"FM" = "Federated States of Micronesia",
"GU" = "Guam",
"MH" = "Marshall Islands",
"MP" = "Northern Mariana Islands",
"PW" = "Palau",
"PR" = "Puerto Rico",
"VI" = "Virgin Islands")
# Stores the max of population size in a university
max.pop <- select(data.set,UGDS) %>% summarise(max = max(UGDS))
# Runs a loop to access each state.
for(abbr in state.abbr.list){
if(abbr %in% names(commonwealth.territories)){
names <- commonwealth.territories[abbr]
}else{
names <- ( state.name[grep(abbr,state.abb)] )
}
state.name.list <- append(state.name.list,names)
}
# Unlists the state's list to manipuate data.
state.name.list <- unlist(state.name.list, use.names=FALSE)
# Changes column name to "United States"
state.name.list <- c("United States", state.name.list)
# Creates the shiny app interface for the users
shinyUI(
fluidPage(theme = shinytheme('united'),
# Creates the navigation bar and side bar.
navbarPage("College Data Information",
tabPanel("Home Page",
titlePanel('College Finder Tool for Undergraduates'),
p('This tool is designed to help potential and current undergraduate students find out helpful
information about various colleges across the United States. Checkout the',
strong('Information'),' tab at the top for more details!'),
p('View the Instructions tab to get started on searching for colleges.'),
sidebarLayout(
sidebarPanel(
selectInput("state", label=h3("State"),
choices=list('States'= state.name.list)),
sliderInput("admission",label=h3("Admission Rate"),
min=0,max=100,value=c(0,100)),
selectInput("major", label=h3("Major"),
c("No Filter" = "None",
"Agriculture" = "PCIP01",
"Resources" = "PCIP03",
"Architecture" = "PCIP04",
"Ethnic Studies" = "PCIP05",
"Communication" = "PCIP09",
"Communications Technologies" = "PCIP10",
"Computer" = "PCIP11",
"Personal & Culinary" = "PCIP12",
"Education" = "PCIP13",
"Engineering" = "PCIP14",
"Engineering Technology" = "PCIP15",
"Linguistics" = "PCIP16",
"Human Sciences" = "PCIP19",
"Legal Studies" = "PCIP22",
"English" = "PCIP23",
"Humanities" = "PCIP24",
"Library Science" = "PCIP25",
"Biomedical Science" = "PCIP26",
"Mathematics" = "PCIP27",
"Military Science" = "PCIP29",
"Interdisciplinary Studies" = "PCIP30",
"Fitness Studies" = "PCIP31",
"Philosophy" = "PCIP38",
"Theology" = "PCIP39",
"Physical Sciences" = "PCIP40",
"Science Technologies" = "PCIP41",
"Psychology" = "PCIP42",
"Protective Services" = "PCIP43",
"Public Administration" = "PCIP44",
"Social Sciences" = "PCIP45",
"Construction Trades" = "PCIP46",
"Repair Technologies" = "PCIP47",
"Precision Production" = "PCIP48",
"Transportation" = "PCIP49",
"Visual And Performing Arts" = "PCIP50",
"Health Professions" = "PCIP51",
"Business" = "PCIP52",
"History" = "PCIP54")),
sliderInput("sat.math",label=h3("SAT Math Scores"),
min=0,max=800,value=c(0,800)),
sliderInput("sat.writing",label=h3("SAT Writing Scores"),
min=0,max=800,value=c(0,800)),
sliderInput("sat.reading",label=h3("SAT Reading Scores"),
min=0,max=800,value=c(0,800)),
sliderInput("size",label=h3("Undergraduate Population Size"),
min=0,max=max(data.set$UGDS, na.rm=TRUE),value=c(0,30000)),
radioButtons("type_tuition",label=h3("Type of Tuition"),
choices=list("No Filter" = 1, "In-State"=2, "Out-of-State"=3),
selected=1),
sliderInput("in_tuition",label=h3("Tuition In-State"),
min=0,max=max(data.set$TUITIONFEE_IN, na.rm=TRUE),value=c(0,10000)),
sliderInput("out_tuition",label=h3("Tuition Out-of-State"),
min=0,max=max(data.set$TUITIONFEE_OUT,na.rm=TRUE),value=c(0,10000)),
sliderInput("loan", label=h3("Loan Amount"),
min=0,max=max(data.set$DEBT_MDN,na.rm=TRUE),value=c(0,max(data.set$DEBT_MDN,na.rm=TRUE))),
sliderInput("expenditure",label=h3("University Expenditure per Student"),
min=0,max=max(data.set$INEXPFTE,na.rm=TRUE),value=c(0,max(data.set$INEXPFTE,na.rm=TRUE)))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel('Map', h2('Map'),
p("The following is information based on a set of colleges in the USA. To explore
more on specific colleges, access the Data Table tab."),
leafletOutput('map'),
htmlOutput('clickinfo')),
tabPanel('Compare',  h2('Compare Schools'),
p("Enter schools you are interested in to compare them on various criteria."),
selectInput('colleges', 'Schools of Interest', choices = data.set$INSTNM, multiple = TRUE, width = "100%"),
fluidRow(dataTableOutput("table"))
),
tabPanel('Results',
h2('Showing schools matching your filters'),
p("The following is a fully comprehesive table to represent the
set of colleges being considered in the map."),
dataTableOutput('full_df')),
tabPanel('Instructions', h2('Instructions'),
p("Instructions on how to use the filter sidebar:",
h3("State"),
"This filter changes what state's colleges are displayed.",
h3("Admission Rate"),
"This filter selects the colleges that have an admission rate inside the selected range.",
h3("Major"),
"This filter selects only the colleges that have this major.",
h3("SAT Math/Writing/Reading Scores"),
"This filter selects the colleges that have an average SAT Math/Writing/Reading
score within the selected range.",
h3("Undergraduate Population Size"),
"This filter selects for colleges with an undergraduate population within the selected range.",
h3("Type of Tuition"),
"Identifies whether or not you want to filter for in state tuition, out of state tuition, or not
at all.",
h3("Tuition In-State/Out-of-State"),
"Selects colleges with a tuition within the selected range."
))
)
)
)
),
# Tag panel for different kinds of data visuals.
tabPanel("Information",
titlePanel("Information about College Finding Application"),
h3('Thesis'),
p("Education is a cornerstone to the modern society. One of
the steps involved in the process of education is college. Nowadays,
a degree in a college is almost a necessity for many jobs. To succeed
in future career, students need to pick the right college that matches
their preferences to spend about 4 years of their life in. Hence, it is
important to look at the nationally accumulated data on Colleges to
ultimately help students pick their preferred colleges.",br(),br(),"We will be
observing the data on such colleges and present it in a helpful way
for the users to understand. The source that we will be using comes
from the source Data.gov, the link to which has been provided below.
The data is collected, managed and hosted by the U.S. General Services
Administration, Technology Transformation Service.",br(),br(),"We aim to make use
of specific subsets of the 2014-2015 data set. This data set will help
us relate the different requirements of different schools throughout
the nation and also provide us with information like top 75 percentile
admit SAT score, acceptance rate, city of the respective university,
tuition fees, etc.
"),
h3('Target Audience'),
p("The major audience that we hope to aim are the graduating high
school seniors who will be looking at different colleges to apply to.
There dire need to compare the 75/25 percentile of each college to
their own scores, tuition fee of each university and suitable city will
be fulfilled by this data representation.",br(),br(),"For example, John Wick, an
average american high school senior who has bagged a decent score in
SAT, limited financial standing and now wants to apply in different
colleges. Since he cannot apply to all of the colleges (due to high
application fee), John has to finalize few colleges where he thinks
he can get in and where his other requirements are met. He turns to
the information provided by us and he can easily list down universities
according to his needs.",br(),br(),"Another audience that we can target will be
the high school counselors who need to keep a track of each university,
their requirements, tuition fee etc., so that they can be helpful
towards their students seeking guidance.",br(),br(),"For example, Josh Spencer,
a counselor at a public school, would need to consider the academic,
financial and vocational situations of each of the student to suggest
appropriate schools. Our presentation can assist people like Josh to
consider preferable options for their students based on our easily
understandable data and their experience.
"),
h3('Reference'),
p("US Department of Education: https://collegescorecard.ed.gov/data/documentation/")
)
)))
runApp()
install.packages("htmlTable")
install.packages("htmltools")
install.packages("htmltools")
# Loads the required library
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(htmlTable)
# For map visualization
library(sp)
library(leaflet)
library(htmltools)
# URL for the interactive map
url <- 'https://api.mapbox.com/styles/v1/connergillette/cizyy5a9m004m2smjhu438php/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiY29ubmVyZ2lsbGV0dGUiLCJhIjoiY2l6cWIwOWJuMDE3azMzcDdvdmx3eWMwMyJ9.Qa235PPv1uPZtvaWIUSpQA'
# Reads and stores the csv file.
df <- read.csv('filtered_college_data.csv', stringsAsFactors=FALSE)
commonwealth.territories <- list("American Samoa" = "AS",
"District of Columbia" = "DC",
"Federated States of Micronesia" = "FM",
"Guam" = "GU",
"Marshall Islands" = "MH",
"Northern Mariana Islands" = "MP",
"Palau" = "PW",
"Puerto Rico" = "PR",
"Virgin Islands" = "VI")
# Creates the server for shiny app.
shinyServer(function(input, output) {
filtered.data <- reactive({
full.data.set <- read.csv('filtered_college_data.csv',stringsAsFactors = FALSE)
full.data.set$TUITIONFEE_IN <- as.numeric(full.data.set$TUITIONFEE_IN)
full.data.set$TUITIONFEE_OUT <- as.numeric(full.data.set$TUITIONFEE_OUT)
full.data.set$ADM_RATE <- as.numeric(full.data.set$ADM_RATE)
full.data.set$UGDS <- as.numeric(full.data.set$UGDS)
full.data.set$SATMTMID <- as.numeric(full.data.set$SATMTMID)
full.data.set$SATVRMID <- as.numeric(full.data.set$SATVRMID)
full.data.set$SATWRMID <- as.numeric(full.data.set$SATWRMID)
full.data.set$DEBT_MDN <- as.numeric(full.data.set$DEBT_MDN)
full.data.set$INEXPFTE <- as.numeric(full.data.set$INEXPFTE)
# Filters for States, if it is the united states it doesn't filter anything.
if(input$state != "United States"){
if(input$state %in% state.name){
full.data.set <- filter(full.data.set, STABBR == state.abb[grep(input$state,state.name)])
}else{
full.data.set <- filter(full.data.set, STABBR == commonwealth.territories[input$state])
}
}
# Filter for Admission Rate
min.range.adm <- input$admission[1]/100
max.range.adm <- input$admission[2]/100
full.data.set <- filter(full.data.set, ADM_RATE >= min.range.adm & ADM_RATE <= max.range.adm)
# Filter for Majors
if(input$major != "None"){
full.data.set <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
input$major, "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT", "DEBT_MDN", "INEXPFTE") %>%
filter_(.dots=paste0(input$major,"!= ","0"))
}
# Filter for SAT Math Score
min.sat.math.size <- input$sat.math[1]
max.sat.math.size <- input$sat.math[2]
full.data.set <- filter(full.data.set, SATMTMID >= min.sat.math.size & SATMTMID <= max.sat.math.size)
# Filter for SAT Writing Score
min.sat.writing.size <- input$sat.writing[1]
max.sat.writing.size <- input$sat.writing[2]
full.data.set <- filter(full.data.set, SATWRMID >= min.sat.writing.size & SATWRMID <= max.sat.writing.size)
# Filter for SAT Math Score
min.sat.reading.size <- input$sat.reading[1]
max.sat.reading.size <- input$sat.reading[2]
full.data.set <- filter(full.data.set, SATVRMID >= min.sat.reading.size & SATVRMID <= max.sat.reading.size)
# Filter for Undergrad Pop Size
min.range.size <- input$size[1]
max.range.size <- input$size[2]
full.data.set <- filter(full.data.set, UGDS >= min.range.size & UGDS <= max.range.size)
# Filter for Tuition
if(input$type_tuition == 2){
full.data.set <- filter(full.data.set, TUITIONFEE_IN >= input$in_tuition[1] & TUITIONFEE_IN <= input$in_tuition[2])
}else if(input$type_tuition == 3){
full.data.set <- filter(full.data.set, TUITIONFEE_OUT >= input$out_tuition[1] & TUITIONFEE_OUT <= input$out_tuition[2])
}
# Filter for Loans
min.range.loan <- input$loan[1]
max.range.loan <- input$loan[2]
full.data.set <- filter(full.data.set, DEBT_MDN >= min.range.loan & DEBT_MDN <= max.range.loan)
min.range.expenditure <- input$expenditure[1]
max.range.expenditure <- input$expenditure[2]
full.data.set <- filter(full.data.set, INEXPFTE >= min.range.expenditure & INEXPFTE <= max.range.expenditure)
return(as.data.frame(full.data.set))
})
# Function to create map.
output$map <- renderLeaflet({
df <- filtered.data()
df$LATITUDE <- as.numeric(df$LATITUDE)
df$LONGITUDE <- as.numeric(df$LONGITUDE)
popup.content <- paste(sep = '<br />', paste0('<a target="_blank" href="http://', df$INSTURL, '">',
df$INSTNM, '</a>'), paste0('<b>Location: </b>', df$CITY, ', ', df$STABBR), ifelse(df$ADM_RATE != 'NULL',
paste0('<b>Admission Rate: </b>', as.numeric(df$ADM_RATE) * 100, '%'), '<b>Admission Rate:</b> Not given'))
leaflet(df) %>%
addCircleMarkers(popup = popup.content, stroke = FALSE, fillOpacity = 1, radius = 4, color = '#ff4300') %>%
addTiles(urlTemplate = url, attribution = 'Maps provided by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView(lng = -104.82, lat = 47.55, zoom = 3)
})
# Retrns list containing names of all the institutions.
list <- reactive({
my.list <- filter(df, INSTNM %in% input$colleges)
return(my.list)
})
# Returns the table containing expenditure, sat scores, state name, total no. of UGs, city
# Tution fees and url of the selected college.
output$table <- renderDataTable({
data <- list()
data <- select(data, INSTNM, STABBR, CITY, ZIP, ADM_RATE, SATVRMID, SATMTMID, SATWRMID,
UGDS, TUITIONFEE_IN, TUITIONFEE_OUT, DEBT_MDN, INEXPFTE, INSTURL)
data <- rename(data, "Name" = INSTNM , "State" = STABBR , "City" = CITY , "Total Undergrads" = UGDS ,
"SAT Median Writing" = SATWRMID, "SAT Median Verbal" = SATVRMID, "SAT Median Math" = SATMTMID,
"Cost IN-STATE" = TUITIONFEE_IN , "Cost OUT-OF-STATE" = TUITIONFEE_OUT ,
"Loan Amount" = DEBT_MDN, "Expenditure per Student" = INEXPFTE, "URL" = INSTURL)
return(data)
})
# returns a table containing selected columns from the original data set.
output$full_df <- renderDataTable({
data <- filtered.data()
data <- select(data, INSTNM, STABBR, CITY, ZIP, ADM_RATE, SATVRMID, SATMTMID, SATWRMID,
UGDS, TUITIONFEE_IN, TUITIONFEE_OUT, DEBT_MDN, INEXPFTE, INSTURL)
data <- rename(data, "Name" = INSTNM , "State" = STABBR , "City" = CITY , "Total Undergrads" = UGDS ,
"SAT Median Writing" = SATWRMID, "SAT Median Verbal" = SATVRMID, "SAT Median Math" = SATMTMID,
"Cost IN-STATE" = TUITIONFEE_IN , "Cost OUT-OF-STATE" = TUITIONFEE_OUT ,
"Loan Amount" = DEBT_MDN, "Expenditure per Student" = INEXPFTE, "URL" = INSTURL)
return(data)
})
# Creates an intercative enviroment for the user for to interact with the data.
observe({
click <- input$map_marker_click
if(!is.null(click$lat) & !is.null(click$lng) ){
df <- filtered.data()
df$DEBT_MDN <- as.numeric(df$DEBT_MDN)
df$INEXPFTE <- as.numeric(df$INEXPFTE)
average.debt <- mean(df$DEBT_MDN, na.rm=TRUE)
average.expenditure <- mean(df$INEXPFTE, na.rm=TRUE)
college.row <- filter(df,LATITUDE == click['lat'], LONGITUDE == click['lng'])
if(college.row$DEBT_MDN > average.debt){
debt.statistic <- "<strong>greater</strong>"
}else{
debt.statistic <- "<strong>less than or equal to</strong>"
}
if(college.row$INEXPFTE > average.expenditure){
expenditure.statistic <- "<strong>greater</strong>"
}else{
expenditure.statistic <- "<strong>less than or equal to</strong>"
}
output$clickinfo <- renderUI({
HTML(paste(
paste0("<strong>University & Location:</strong> ", college.row$INSTNM," (",college.row$CITY,", ",college.row$STABBR,")"),
paste0("<strong>Undergrad Population:</strong> ",college.row$UGDS),
paste0("<strong>SAT Writing Score (Median):</strong> ",college.row$SATWRMID),
paste0("<strong>SAT Reading Score (Median):</strong> ",college.row$SATVRMID),
paste0("<strong>SAT Math Score (Median):</strong> ",college.row$SATMTMID),
paste0("<strong>In-State Tuition:</strong> ",college.row$TUITIONFEE_IN),
paste0("<strong>Out-of-State Tuition:</strong> ",college.row$TUITIONFEE_OUT),
paste0("<strong>Loan Amount:</strong> ",college.row$DEBT_MDN),
paste0("<strong>Expenditure per Student:</strong> ",college.row$INEXPFTE),
paste0("<strong>University URL:</strong> ",college.row$INSTURL),
paste0("The average debt from this university is ",debt.statistic,
" than the average debt from all Universities in the United States."),
paste0("The average expenditure per student from this university is ",expenditure.statistic,
" than the average debt from all Universities in the United States."),
sep='<br/>'))
})
}
})
})
